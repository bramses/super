// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// phase
//     text str
//     controls [] control
//     history [] str
//     num int
    
// functor
//     phases [] phase
//     latest_phase int

// control
//     typeof enum Button || Slider
//     linkTo

// Button
//     name str
//     value str

// Slider
//     name str
//     value str

// Version
//     text str
//     phase phase
    
model Phase {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String
    controls  Control[]
    history   Version[]
    num       Int
    functor   Functor  @relation(fields: [functorId], references: [id], onDelete: Cascade)
    functorId String
}

model Version {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String
    phase     Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
    phaseId   String
}


model Control {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    typeof    String
    linkTo    String
    phase     Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
    phaseId   String
    buttons  Button[]
    sliders  Slider[]
}

model Button {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    value     String
    control   Control  @relation(fields: [controlId], references: [id], onDelete: Cascade)
    controlId String
}

model Slider {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    value     String
    control   Control  @relation(fields: [controlId], references: [id], onDelete: Cascade)
    controlId String
}

model Functor {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    phases    Phase[]
    latestPhase Int
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
